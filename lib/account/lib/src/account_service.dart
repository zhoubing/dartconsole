/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library account.src.account_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:account/account.dart';
import 'package:xkcm/xkcm.dart' as t_xkcm;


abstract class AccountService {

  Future sendVerifyCode(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber);

  Future sendVerifyCodeAlways(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber);

  Future validateVerifyCode(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber, String verifyCode);

  Future<AccountInfo> registerAccount(t_xkcm.CommArgs commArgs, String email, String mobileNum, String password, String userName, String account, int gender);

  Future<AccountInfo> registerAccount2(t_xkcm.CommArgs commArgs, String email, String mobileNum, String password, String userName, String account, int gender, String personName, int birthday);

  Future<String> saveAvatar(t_xkcm.CommArgs commArgs, String selfUserId, String formatType, Uint8List dataContent);

  Future<AccountInfo> validateAccount(t_xkcm.CommArgs commArgs, String userAccount, String password);

  Future editPassword(t_xkcm.CommArgs commArgs, String oldpwd, String newpwd);

  Future<bool> editPersonName(t_xkcm.CommArgs commArgs, String realName);

  Future<bool> hasSecurityMobileNumber(t_xkcm.CommArgs commArgs);

  Future<bool> bindSecurityMobileNumber(t_xkcm.CommArgs commArgs, String mobileNumber);

  Future<int> hasSecurityVerification(t_xkcm.CommArgs commArgs, String phrCode);

  Future retrievePassword(t_xkcm.CommArgs commArgs, String phoneNum, String newpwd);

  Future<String> getReportInstruction(t_xkcm.CommArgs commArgs);
}

class AccountServiceClient implements AccountService {

  AccountServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future sendVerifyCode(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber) async {
    oprot.writeMessageBegin(new TMessage("sendVerifyCode", TMessageType.CALL, nextSeqid()));
    sendVerifyCode_args args = new sendVerifyCode_args();
    args.commArgs = commArgs;
    args.localCode = localCode;
    args.mobileNumber = mobileNumber;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendVerifyCode_result result = new sendVerifyCode_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future sendVerifyCodeAlways(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber) async {
    oprot.writeMessageBegin(new TMessage("sendVerifyCodeAlways", TMessageType.CALL, nextSeqid()));
    sendVerifyCodeAlways_args args = new sendVerifyCodeAlways_args();
    args.commArgs = commArgs;
    args.localCode = localCode;
    args.mobileNumber = mobileNumber;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendVerifyCodeAlways_result result = new sendVerifyCodeAlways_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future validateVerifyCode(t_xkcm.CommArgs commArgs, String localCode, String mobileNumber, String verifyCode) async {
    oprot.writeMessageBegin(new TMessage("validateVerifyCode", TMessageType.CALL, nextSeqid()));
    validateVerifyCode_args args = new validateVerifyCode_args();
    args.commArgs = commArgs;
    args.localCode = localCode;
    args.mobileNumber = mobileNumber;
    args.verifyCode = verifyCode;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    validateVerifyCode_result result = new validateVerifyCode_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future<AccountInfo> registerAccount(t_xkcm.CommArgs commArgs, String email, String mobileNum, String password, String userName, String account, int gender) async {
    oprot.writeMessageBegin(new TMessage("registerAccount", TMessageType.CALL, nextSeqid()));
    registerAccount_args args = new registerAccount_args();
    args.commArgs = commArgs;
    args.email = email;
    args.mobileNum = mobileNum;
    args.password = password;
    args.userName = userName;
    args.account = account;
    args.gender = gender;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    registerAccount_result result = new registerAccount_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "registerAccount failed: unknown result");
  }

  Future<AccountInfo> registerAccount2(t_xkcm.CommArgs commArgs, String email, String mobileNum, String password, String userName, String account, int gender, String personName, int birthday) async {
    oprot.writeMessageBegin(new TMessage("registerAccount2", TMessageType.CALL, nextSeqid()));
    registerAccount2_args args = new registerAccount2_args();
    args.commArgs = commArgs;
    args.email = email;
    args.mobileNum = mobileNum;
    args.password = password;
    args.userName = userName;
    args.account = account;
    args.gender = gender;
    args.personName = personName;
    args.birthday = birthday;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    registerAccount2_result result = new registerAccount2_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "registerAccount2 failed: unknown result");
  }

  Future<String> saveAvatar(t_xkcm.CommArgs commArgs, String selfUserId, String formatType, Uint8List dataContent) async {
    oprot.writeMessageBegin(new TMessage("saveAvatar", TMessageType.CALL, nextSeqid()));
    saveAvatar_args args = new saveAvatar_args();
    args.commArgs = commArgs;
    args.selfUserId = selfUserId;
    args.formatType = formatType;
    args.dataContent = dataContent;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    saveAvatar_result result = new saveAvatar_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "saveAvatar failed: unknown result");
  }

  Future<AccountInfo> validateAccount(t_xkcm.CommArgs commArgs, String userAccount, String password) async {
    oprot.writeMessageBegin(new TMessage("validateAccount", TMessageType.CALL, nextSeqid()));
    validateAccount_args args = new validateAccount_args();
    args.commArgs = commArgs;
    args.userAccount = userAccount;
    args.password = password;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    validateAccount_result result = new validateAccount_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "validateAccount failed: unknown result");
  }

  Future editPassword(t_xkcm.CommArgs commArgs, String oldpwd, String newpwd) async {
    oprot.writeMessageBegin(new TMessage("editPassword", TMessageType.CALL, nextSeqid()));
    editPassword_args args = new editPassword_args();
    args.commArgs = commArgs;
    args.oldpwd = oldpwd;
    args.newpwd = newpwd;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    editPassword_result result = new editPassword_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future<bool> editPersonName(t_xkcm.CommArgs commArgs, String realName) async {
    oprot.writeMessageBegin(new TMessage("editPersonName", TMessageType.CALL, nextSeqid()));
    editPersonName_args args = new editPersonName_args();
    args.commArgs = commArgs;
    args.realName = realName;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    editPersonName_result result = new editPersonName_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "editPersonName failed: unknown result");
  }

  Future<bool> hasSecurityMobileNumber(t_xkcm.CommArgs commArgs) async {
    oprot.writeMessageBegin(new TMessage("hasSecurityMobileNumber", TMessageType.CALL, nextSeqid()));
    hasSecurityMobileNumber_args args = new hasSecurityMobileNumber_args();
    args.commArgs = commArgs;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    hasSecurityMobileNumber_result result = new hasSecurityMobileNumber_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "hasSecurityMobileNumber failed: unknown result");
  }

  Future<bool> bindSecurityMobileNumber(t_xkcm.CommArgs commArgs, String mobileNumber) async {
    oprot.writeMessageBegin(new TMessage("bindSecurityMobileNumber", TMessageType.CALL, nextSeqid()));
    bindSecurityMobileNumber_args args = new bindSecurityMobileNumber_args();
    args.commArgs = commArgs;
    args.mobileNumber = mobileNumber;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    bindSecurityMobileNumber_result result = new bindSecurityMobileNumber_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "bindSecurityMobileNumber failed: unknown result");
  }

  Future<int> hasSecurityVerification(t_xkcm.CommArgs commArgs, String phrCode) async {
    oprot.writeMessageBegin(new TMessage("hasSecurityVerification", TMessageType.CALL, nextSeqid()));
    hasSecurityVerification_args args = new hasSecurityVerification_args();
    args.commArgs = commArgs;
    args.phrCode = phrCode;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    hasSecurityVerification_result result = new hasSecurityVerification_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "hasSecurityVerification failed: unknown result");
  }

  Future retrievePassword(t_xkcm.CommArgs commArgs, String phoneNum, String newpwd) async {
    oprot.writeMessageBegin(new TMessage("retrievePassword", TMessageType.CALL, nextSeqid()));
    retrievePassword_args args = new retrievePassword_args();
    args.commArgs = commArgs;
    args.phoneNum = phoneNum;
    args.newpwd = newpwd;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    retrievePassword_result result = new retrievePassword_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future<String> getReportInstruction(t_xkcm.CommArgs commArgs) async {
    oprot.writeMessageBegin(new TMessage("getReportInstruction", TMessageType.CALL, nextSeqid()));
    getReportInstruction_args args = new getReportInstruction_args();
    args.commArgs = commArgs;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getReportInstruction_result result = new getReportInstruction_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getReportInstruction failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class AccountServiceProcessor implements TProcessor {
  AccountServiceProcessor(AccountService iface) {
    iface_ = iface;
    PROCESS_MAP["sendVerifyCode"] = sendVerifyCode;
    PROCESS_MAP["sendVerifyCodeAlways"] = sendVerifyCodeAlways;
    PROCESS_MAP["validateVerifyCode"] = validateVerifyCode;
    PROCESS_MAP["registerAccount"] = registerAccount;
    PROCESS_MAP["registerAccount2"] = registerAccount2;
    PROCESS_MAP["saveAvatar"] = saveAvatar;
    PROCESS_MAP["validateAccount"] = validateAccount;
    PROCESS_MAP["editPassword"] = editPassword;
    PROCESS_MAP["editPersonName"] = editPersonName;
    PROCESS_MAP["hasSecurityMobileNumber"] = hasSecurityMobileNumber;
    PROCESS_MAP["bindSecurityMobileNumber"] = bindSecurityMobileNumber;
    PROCESS_MAP["hasSecurityVerification"] = hasSecurityVerification;
    PROCESS_MAP["retrievePassword"] = retrievePassword;
    PROCESS_MAP["getReportInstruction"] = getReportInstruction;
  }

  AccountService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  sendVerifyCode(int seqid, TProtocol iprot, TProtocol oprot) {
    sendVerifyCode_args args = new sendVerifyCode_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendVerifyCode_result result = new sendVerifyCode_result();
    try {
      iface_.sendVerifyCode(args.commArgs, args.localCode, args.mobileNumber);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendVerifyCode");
      oprot.writeMessageBegin(new TMessage("sendVerifyCode", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendVerifyCode", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendVerifyCodeAlways(int seqid, TProtocol iprot, TProtocol oprot) {
    sendVerifyCodeAlways_args args = new sendVerifyCodeAlways_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendVerifyCodeAlways_result result = new sendVerifyCodeAlways_result();
    try {
      iface_.sendVerifyCodeAlways(args.commArgs, args.localCode, args.mobileNumber);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendVerifyCodeAlways");
      oprot.writeMessageBegin(new TMessage("sendVerifyCodeAlways", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendVerifyCodeAlways", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  validateVerifyCode(int seqid, TProtocol iprot, TProtocol oprot) {
    validateVerifyCode_args args = new validateVerifyCode_args();
    args.read(iprot);
    iprot.readMessageEnd();
    validateVerifyCode_result result = new validateVerifyCode_result();
    try {
      iface_.validateVerifyCode(args.commArgs, args.localCode, args.mobileNumber, args.verifyCode);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing validateVerifyCode");
      oprot.writeMessageBegin(new TMessage("validateVerifyCode", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("validateVerifyCode", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  registerAccount(int seqid, TProtocol iprot, TProtocol oprot) async {
    registerAccount_args args = new registerAccount_args();
    args.read(iprot);
    iprot.readMessageEnd();
    registerAccount_result result = new registerAccount_result();
    try {
      result.success = await iface_.registerAccount(args.commArgs, args.email, args.mobileNum, args.password, args.userName, args.account, args.gender);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing registerAccount");
      oprot.writeMessageBegin(new TMessage("registerAccount", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("registerAccount", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  registerAccount2(int seqid, TProtocol iprot, TProtocol oprot) async {
    registerAccount2_args args = new registerAccount2_args();
    args.read(iprot);
    iprot.readMessageEnd();
    registerAccount2_result result = new registerAccount2_result();
    try {
      result.success = await iface_.registerAccount2(args.commArgs, args.email, args.mobileNum, args.password, args.userName, args.account, args.gender, args.personName, args.birthday);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing registerAccount2");
      oprot.writeMessageBegin(new TMessage("registerAccount2", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("registerAccount2", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  saveAvatar(int seqid, TProtocol iprot, TProtocol oprot) async {
    saveAvatar_args args = new saveAvatar_args();
    args.read(iprot);
    iprot.readMessageEnd();
    saveAvatar_result result = new saveAvatar_result();
    try {
      result.success = await iface_.saveAvatar(args.commArgs, args.selfUserId, args.formatType, args.dataContent);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing saveAvatar");
      oprot.writeMessageBegin(new TMessage("saveAvatar", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("saveAvatar", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  validateAccount(int seqid, TProtocol iprot, TProtocol oprot) async {
    validateAccount_args args = new validateAccount_args();
    args.read(iprot);
    iprot.readMessageEnd();
    validateAccount_result result = new validateAccount_result();
    try {
      result.success = await iface_.validateAccount(args.commArgs, args.userAccount, args.password);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing validateAccount");
      oprot.writeMessageBegin(new TMessage("validateAccount", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("validateAccount", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  editPassword(int seqid, TProtocol iprot, TProtocol oprot) {
    editPassword_args args = new editPassword_args();
    args.read(iprot);
    iprot.readMessageEnd();
    editPassword_result result = new editPassword_result();
    try {
      iface_.editPassword(args.commArgs, args.oldpwd, args.newpwd);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing editPassword");
      oprot.writeMessageBegin(new TMessage("editPassword", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("editPassword", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  editPersonName(int seqid, TProtocol iprot, TProtocol oprot) async {
    editPersonName_args args = new editPersonName_args();
    args.read(iprot);
    iprot.readMessageEnd();
    editPersonName_result result = new editPersonName_result();
    try {
      result.success = await iface_.editPersonName(args.commArgs, args.realName);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing editPersonName");
      oprot.writeMessageBegin(new TMessage("editPersonName", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("editPersonName", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  hasSecurityMobileNumber(int seqid, TProtocol iprot, TProtocol oprot) async {
    hasSecurityMobileNumber_args args = new hasSecurityMobileNumber_args();
    args.read(iprot);
    iprot.readMessageEnd();
    hasSecurityMobileNumber_result result = new hasSecurityMobileNumber_result();
    try {
      result.success = await iface_.hasSecurityMobileNumber(args.commArgs);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing hasSecurityMobileNumber");
      oprot.writeMessageBegin(new TMessage("hasSecurityMobileNumber", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("hasSecurityMobileNumber", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  bindSecurityMobileNumber(int seqid, TProtocol iprot, TProtocol oprot) async {
    bindSecurityMobileNumber_args args = new bindSecurityMobileNumber_args();
    args.read(iprot);
    iprot.readMessageEnd();
    bindSecurityMobileNumber_result result = new bindSecurityMobileNumber_result();
    try {
      result.success = await iface_.bindSecurityMobileNumber(args.commArgs, args.mobileNumber);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing bindSecurityMobileNumber");
      oprot.writeMessageBegin(new TMessage("bindSecurityMobileNumber", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("bindSecurityMobileNumber", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  hasSecurityVerification(int seqid, TProtocol iprot, TProtocol oprot) async {
    hasSecurityVerification_args args = new hasSecurityVerification_args();
    args.read(iprot);
    iprot.readMessageEnd();
    hasSecurityVerification_result result = new hasSecurityVerification_result();
    try {
      result.success = await iface_.hasSecurityVerification(args.commArgs, args.phrCode);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing hasSecurityVerification");
      oprot.writeMessageBegin(new TMessage("hasSecurityVerification", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("hasSecurityVerification", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  retrievePassword(int seqid, TProtocol iprot, TProtocol oprot) {
    retrievePassword_args args = new retrievePassword_args();
    args.read(iprot);
    iprot.readMessageEnd();
    retrievePassword_result result = new retrievePassword_result();
    try {
      iface_.retrievePassword(args.commArgs, args.phoneNum, args.newpwd);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing retrievePassword");
      oprot.writeMessageBegin(new TMessage("retrievePassword", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("retrievePassword", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getReportInstruction(int seqid, TProtocol iprot, TProtocol oprot) async {
    getReportInstruction_args args = new getReportInstruction_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getReportInstruction_result result = new getReportInstruction_result();
    try {
      result.success = await iface_.getReportInstruction(args.commArgs);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getReportInstruction");
      oprot.writeMessageBegin(new TMessage("getReportInstruction", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getReportInstruction", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class sendVerifyCode_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendVerifyCode_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _LOCAL_CODE_FIELD_DESC = new TField("localCode", TType.STRING, 2);
  static final TField _MOBILE_NUMBER_FIELD_DESC = new TField("mobileNumber", TType.STRING, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _localCode;
  static const int LOCALCODE = 2;
  String _mobileNumber;
  static const int MOBILENUMBER = 3;


  sendVerifyCode_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // localCode
  String get localCode => this._localCode;

  set localCode(String localCode) {
    this._localCode = localCode;
  }

  bool isSetLocalCode() => this.localCode != null;

  unsetLocalCode() {
    this.localCode = null;
  }

  // mobileNumber
  String get mobileNumber => this._mobileNumber;

  set mobileNumber(String mobileNumber) {
    this._mobileNumber = mobileNumber;
  }

  bool isSetMobileNumber() => this.mobileNumber != null;

  unsetMobileNumber() {
    this.mobileNumber = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case LOCALCODE:
        return this.localCode;
      case MOBILENUMBER:
        return this.mobileNumber;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case LOCALCODE:
        if (value == null) {
          unsetLocalCode();
        } else {
          this.localCode = value;
        }
        break;

      case MOBILENUMBER:
        if (value == null) {
          unsetMobileNumber();
        } else {
          this.mobileNumber = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case LOCALCODE:
        return isSetLocalCode();
      case MOBILENUMBER:
        return isSetMobileNumber();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCALCODE:
          if (field.type == TType.STRING) {
            this.localCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUMBER:
          if (field.type == TType.STRING) {
            this.mobileNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.localCode != null) {
      oprot.writeFieldBegin(_LOCAL_CODE_FIELD_DESC);
      oprot.writeString(this.localCode);
      oprot.writeFieldEnd();
    }
    if (this.mobileNumber != null) {
      oprot.writeFieldBegin(_MOBILE_NUMBER_FIELD_DESC);
      oprot.writeString(this.mobileNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendVerifyCode_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("localCode:");
    if (this.localCode == null) {
      ret.write("null");
    } else {
      ret.write(this.localCode);
    }

    ret.write(", ");
    ret.write("mobileNumber:");
    if (this.mobileNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNumber);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendVerifyCode_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendVerifyCode_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  sendVerifyCode_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendVerifyCode_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendVerifyCodeAlways_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendVerifyCodeAlways_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _LOCAL_CODE_FIELD_DESC = new TField("localCode", TType.STRING, 2);
  static final TField _MOBILE_NUMBER_FIELD_DESC = new TField("mobileNumber", TType.STRING, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _localCode;
  static const int LOCALCODE = 2;
  String _mobileNumber;
  static const int MOBILENUMBER = 3;


  sendVerifyCodeAlways_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // localCode
  String get localCode => this._localCode;

  set localCode(String localCode) {
    this._localCode = localCode;
  }

  bool isSetLocalCode() => this.localCode != null;

  unsetLocalCode() {
    this.localCode = null;
  }

  // mobileNumber
  String get mobileNumber => this._mobileNumber;

  set mobileNumber(String mobileNumber) {
    this._mobileNumber = mobileNumber;
  }

  bool isSetMobileNumber() => this.mobileNumber != null;

  unsetMobileNumber() {
    this.mobileNumber = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case LOCALCODE:
        return this.localCode;
      case MOBILENUMBER:
        return this.mobileNumber;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case LOCALCODE:
        if (value == null) {
          unsetLocalCode();
        } else {
          this.localCode = value;
        }
        break;

      case MOBILENUMBER:
        if (value == null) {
          unsetMobileNumber();
        } else {
          this.mobileNumber = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case LOCALCODE:
        return isSetLocalCode();
      case MOBILENUMBER:
        return isSetMobileNumber();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCALCODE:
          if (field.type == TType.STRING) {
            this.localCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUMBER:
          if (field.type == TType.STRING) {
            this.mobileNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.localCode != null) {
      oprot.writeFieldBegin(_LOCAL_CODE_FIELD_DESC);
      oprot.writeString(this.localCode);
      oprot.writeFieldEnd();
    }
    if (this.mobileNumber != null) {
      oprot.writeFieldBegin(_MOBILE_NUMBER_FIELD_DESC);
      oprot.writeString(this.mobileNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendVerifyCodeAlways_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("localCode:");
    if (this.localCode == null) {
      ret.write("null");
    } else {
      ret.write(this.localCode);
    }

    ret.write(", ");
    ret.write("mobileNumber:");
    if (this.mobileNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNumber);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendVerifyCodeAlways_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendVerifyCodeAlways_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  sendVerifyCodeAlways_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendVerifyCodeAlways_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class validateVerifyCode_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("validateVerifyCode_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _LOCAL_CODE_FIELD_DESC = new TField("localCode", TType.STRING, 2);
  static final TField _MOBILE_NUMBER_FIELD_DESC = new TField("mobileNumber", TType.STRING, 3);
  static final TField _VERIFY_CODE_FIELD_DESC = new TField("verifyCode", TType.STRING, 4);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _localCode;
  static const int LOCALCODE = 2;
  String _mobileNumber;
  static const int MOBILENUMBER = 3;
  String _verifyCode;
  static const int VERIFYCODE = 4;


  validateVerifyCode_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // localCode
  String get localCode => this._localCode;

  set localCode(String localCode) {
    this._localCode = localCode;
  }

  bool isSetLocalCode() => this.localCode != null;

  unsetLocalCode() {
    this.localCode = null;
  }

  // mobileNumber
  String get mobileNumber => this._mobileNumber;

  set mobileNumber(String mobileNumber) {
    this._mobileNumber = mobileNumber;
  }

  bool isSetMobileNumber() => this.mobileNumber != null;

  unsetMobileNumber() {
    this.mobileNumber = null;
  }

  // verifyCode
  String get verifyCode => this._verifyCode;

  set verifyCode(String verifyCode) {
    this._verifyCode = verifyCode;
  }

  bool isSetVerifyCode() => this.verifyCode != null;

  unsetVerifyCode() {
    this.verifyCode = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case LOCALCODE:
        return this.localCode;
      case MOBILENUMBER:
        return this.mobileNumber;
      case VERIFYCODE:
        return this.verifyCode;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case LOCALCODE:
        if (value == null) {
          unsetLocalCode();
        } else {
          this.localCode = value;
        }
        break;

      case MOBILENUMBER:
        if (value == null) {
          unsetMobileNumber();
        } else {
          this.mobileNumber = value;
        }
        break;

      case VERIFYCODE:
        if (value == null) {
          unsetVerifyCode();
        } else {
          this.verifyCode = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case LOCALCODE:
        return isSetLocalCode();
      case MOBILENUMBER:
        return isSetMobileNumber();
      case VERIFYCODE:
        return isSetVerifyCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCALCODE:
          if (field.type == TType.STRING) {
            this.localCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUMBER:
          if (field.type == TType.STRING) {
            this.mobileNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERIFYCODE:
          if (field.type == TType.STRING) {
            this.verifyCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.localCode != null) {
      oprot.writeFieldBegin(_LOCAL_CODE_FIELD_DESC);
      oprot.writeString(this.localCode);
      oprot.writeFieldEnd();
    }
    if (this.mobileNumber != null) {
      oprot.writeFieldBegin(_MOBILE_NUMBER_FIELD_DESC);
      oprot.writeString(this.mobileNumber);
      oprot.writeFieldEnd();
    }
    if (this.verifyCode != null) {
      oprot.writeFieldBegin(_VERIFY_CODE_FIELD_DESC);
      oprot.writeString(this.verifyCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("validateVerifyCode_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("localCode:");
    if (this.localCode == null) {
      ret.write("null");
    } else {
      ret.write(this.localCode);
    }

    ret.write(", ");
    ret.write("mobileNumber:");
    if (this.mobileNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNumber);
    }

    ret.write(", ");
    ret.write("verifyCode:");
    if (this.verifyCode == null) {
      ret.write("null");
    } else {
      ret.write(this.verifyCode);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class validateVerifyCode_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("validateVerifyCode_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  validateVerifyCode_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("validateVerifyCode_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerAccount_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerAccount_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _EMAIL_FIELD_DESC = new TField("email", TType.STRING, 2);
  static final TField _MOBILE_NUM_FIELD_DESC = new TField("mobileNum", TType.STRING, 3);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 4);
  static final TField _USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, 5);
  static final TField _ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, 6);
  static final TField _GENDER_FIELD_DESC = new TField("gender", TType.I32, 7);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _email;
  static const int EMAIL = 2;
  String _mobileNum;
  static const int MOBILENUM = 3;
  String _password;
  static const int PASSWORD = 4;
  String _userName;
  static const int USERNAME = 5;
  String _account;
  static const int ACCOUNT = 6;
  int _gender;
  static const int GENDER = 7;

  bool __isset_gender = false;

  registerAccount_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // email
  String get email => this._email;

  set email(String email) {
    this._email = email;
  }

  bool isSetEmail() => this.email != null;

  unsetEmail() {
    this.email = null;
  }

  // mobileNum
  String get mobileNum => this._mobileNum;

  set mobileNum(String mobileNum) {
    this._mobileNum = mobileNum;
  }

  bool isSetMobileNum() => this.mobileNum != null;

  unsetMobileNum() {
    this.mobileNum = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  // userName
  String get userName => this._userName;

  set userName(String userName) {
    this._userName = userName;
  }

  bool isSetUserName() => this.userName != null;

  unsetUserName() {
    this.userName = null;
  }

  // account
  String get account => this._account;

  set account(String account) {
    this._account = account;
  }

  bool isSetAccount() => this.account != null;

  unsetAccount() {
    this.account = null;
  }

  // gender
  int get gender => this._gender;

  set gender(int gender) {
    this._gender = gender;
    this.__isset_gender = true;
  }

  bool isSetGender() => this.__isset_gender;

  unsetGender() {
    this.__isset_gender = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case EMAIL:
        return this.email;
      case MOBILENUM:
        return this.mobileNum;
      case PASSWORD:
        return this.password;
      case USERNAME:
        return this.userName;
      case ACCOUNT:
        return this.account;
      case GENDER:
        return this.gender;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case MOBILENUM:
        if (value == null) {
          unsetMobileNum();
        } else {
          this.mobileNum = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          this.userName = value;
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          this.account = value;
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          this.gender = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case EMAIL:
        return isSetEmail();
      case MOBILENUM:
        return isSetMobileNum();
      case PASSWORD:
        return isSetPassword();
      case USERNAME:
        return isSetUserName();
      case ACCOUNT:
        return isSetAccount();
      case GENDER:
        return isSetGender();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAIL:
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUM:
          if (field.type == TType.STRING) {
            this.mobileNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERNAME:
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCOUNT:
          if (field.type == TType.STRING) {
            this.account = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GENDER:
          if (field.type == TType.I32) {
            this.gender = iprot.readI32();
            this.__isset_gender = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      oprot.writeFieldBegin(_EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.mobileNum != null) {
      oprot.writeFieldBegin(_MOBILE_NUM_FIELD_DESC);
      oprot.writeString(this.mobileNum);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    if (this.userName != null) {
      oprot.writeFieldBegin(_USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.account != null) {
      oprot.writeFieldBegin(_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_GENDER_FIELD_DESC);
    oprot.writeI32(this.gender);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerAccount_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("email:");
    if (this.email == null) {
      ret.write("null");
    } else {
      ret.write(this.email);
    }

    ret.write(", ");
    ret.write("mobileNum:");
    if (this.mobileNum == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNum);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(", ");
    ret.write("userName:");
    if (this.userName == null) {
      ret.write("null");
    } else {
      ret.write(this.userName);
    }

    ret.write(", ");
    ret.write("account:");
    if (this.account == null) {
      ret.write("null");
    } else {
      ret.write(this.account);
    }

    ret.write(", ");
    ret.write("gender:");
    String gender_name = Gender.VALUES_TO_NAMES[this.gender];
    if (gender_name != null) {
      ret.write(gender_name);
      ret.write(" (");
    }
    ret.write(this.gender);
    if (gender_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetGender() && !Gender.VALID_VALUES.contains(gender)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'gender' has been assigned the invalid value $gender");
    }
  }

}

class registerAccount_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerAccount_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  AccountInfo _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  registerAccount_result() {
  }

  // success
  AccountInfo get success => this._success;

  set success(AccountInfo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new AccountInfo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerAccount_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerAccount2_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerAccount2_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _EMAIL_FIELD_DESC = new TField("email", TType.STRING, 2);
  static final TField _MOBILE_NUM_FIELD_DESC = new TField("mobileNum", TType.STRING, 3);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 4);
  static final TField _USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, 5);
  static final TField _ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, 6);
  static final TField _GENDER_FIELD_DESC = new TField("gender", TType.I32, 7);
  static final TField _PERSON_NAME_FIELD_DESC = new TField("personName", TType.STRING, 8);
  static final TField _BIRTHDAY_FIELD_DESC = new TField("birthday", TType.I64, 9);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _email;
  static const int EMAIL = 2;
  String _mobileNum;
  static const int MOBILENUM = 3;
  String _password;
  static const int PASSWORD = 4;
  String _userName;
  static const int USERNAME = 5;
  String _account;
  static const int ACCOUNT = 6;
  int _gender;
  static const int GENDER = 7;
  String _personName;
  static const int PERSONNAME = 8;
  int _birthday = 0;
  static const int BIRTHDAY = 9;

  bool __isset_gender = false;
  bool __isset_birthday = false;

  registerAccount2_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // email
  String get email => this._email;

  set email(String email) {
    this._email = email;
  }

  bool isSetEmail() => this.email != null;

  unsetEmail() {
    this.email = null;
  }

  // mobileNum
  String get mobileNum => this._mobileNum;

  set mobileNum(String mobileNum) {
    this._mobileNum = mobileNum;
  }

  bool isSetMobileNum() => this.mobileNum != null;

  unsetMobileNum() {
    this.mobileNum = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  // userName
  String get userName => this._userName;

  set userName(String userName) {
    this._userName = userName;
  }

  bool isSetUserName() => this.userName != null;

  unsetUserName() {
    this.userName = null;
  }

  // account
  String get account => this._account;

  set account(String account) {
    this._account = account;
  }

  bool isSetAccount() => this.account != null;

  unsetAccount() {
    this.account = null;
  }

  // gender
  int get gender => this._gender;

  set gender(int gender) {
    this._gender = gender;
    this.__isset_gender = true;
  }

  bool isSetGender() => this.__isset_gender;

  unsetGender() {
    this.__isset_gender = false;
  }

  // personName
  String get personName => this._personName;

  set personName(String personName) {
    this._personName = personName;
  }

  bool isSetPersonName() => this.personName != null;

  unsetPersonName() {
    this.personName = null;
  }

  // birthday
  int get birthday => this._birthday;

  set birthday(int birthday) {
    this._birthday = birthday;
    this.__isset_birthday = true;
  }

  bool isSetBirthday() => this.__isset_birthday;

  unsetBirthday() {
    this.__isset_birthday = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case EMAIL:
        return this.email;
      case MOBILENUM:
        return this.mobileNum;
      case PASSWORD:
        return this.password;
      case USERNAME:
        return this.userName;
      case ACCOUNT:
        return this.account;
      case GENDER:
        return this.gender;
      case PERSONNAME:
        return this.personName;
      case BIRTHDAY:
        return this.birthday;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case MOBILENUM:
        if (value == null) {
          unsetMobileNum();
        } else {
          this.mobileNum = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          this.userName = value;
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          this.account = value;
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          this.gender = value;
        }
        break;

      case PERSONNAME:
        if (value == null) {
          unsetPersonName();
        } else {
          this.personName = value;
        }
        break;

      case BIRTHDAY:
        if (value == null) {
          unsetBirthday();
        } else {
          this.birthday = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case EMAIL:
        return isSetEmail();
      case MOBILENUM:
        return isSetMobileNum();
      case PASSWORD:
        return isSetPassword();
      case USERNAME:
        return isSetUserName();
      case ACCOUNT:
        return isSetAccount();
      case GENDER:
        return isSetGender();
      case PERSONNAME:
        return isSetPersonName();
      case BIRTHDAY:
        return isSetBirthday();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAIL:
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUM:
          if (field.type == TType.STRING) {
            this.mobileNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERNAME:
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCOUNT:
          if (field.type == TType.STRING) {
            this.account = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GENDER:
          if (field.type == TType.I32) {
            this.gender = iprot.readI32();
            this.__isset_gender = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PERSONNAME:
          if (field.type == TType.STRING) {
            this.personName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BIRTHDAY:
          if (field.type == TType.I64) {
            this.birthday = iprot.readI64();
            this.__isset_birthday = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      oprot.writeFieldBegin(_EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.mobileNum != null) {
      oprot.writeFieldBegin(_MOBILE_NUM_FIELD_DESC);
      oprot.writeString(this.mobileNum);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    if (this.userName != null) {
      oprot.writeFieldBegin(_USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.account != null) {
      oprot.writeFieldBegin(_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_GENDER_FIELD_DESC);
    oprot.writeI32(this.gender);
    oprot.writeFieldEnd();
    if (this.personName != null) {
      oprot.writeFieldBegin(_PERSON_NAME_FIELD_DESC);
      oprot.writeString(this.personName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_BIRTHDAY_FIELD_DESC);
    oprot.writeI64(this.birthday);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerAccount2_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("email:");
    if (this.email == null) {
      ret.write("null");
    } else {
      ret.write(this.email);
    }

    ret.write(", ");
    ret.write("mobileNum:");
    if (this.mobileNum == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNum);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(", ");
    ret.write("userName:");
    if (this.userName == null) {
      ret.write("null");
    } else {
      ret.write(this.userName);
    }

    ret.write(", ");
    ret.write("account:");
    if (this.account == null) {
      ret.write("null");
    } else {
      ret.write(this.account);
    }

    ret.write(", ");
    ret.write("gender:");
    String gender_name = Gender.VALUES_TO_NAMES[this.gender];
    if (gender_name != null) {
      ret.write(gender_name);
      ret.write(" (");
    }
    ret.write(this.gender);
    if (gender_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("personName:");
    if (this.personName == null) {
      ret.write("null");
    } else {
      ret.write(this.personName);
    }

    ret.write(", ");
    ret.write("birthday:");
    ret.write(this.birthday);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetGender() && !Gender.VALID_VALUES.contains(gender)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'gender' has been assigned the invalid value $gender");
    }
  }

}

class registerAccount2_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerAccount2_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  AccountInfo _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  registerAccount2_result() {
  }

  // success
  AccountInfo get success => this._success;

  set success(AccountInfo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new AccountInfo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerAccount2_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class saveAvatar_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("saveAvatar_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _SELF_USER_ID_FIELD_DESC = new TField("selfUserId", TType.STRING, 2);
  static final TField _FORMAT_TYPE_FIELD_DESC = new TField("formatType", TType.STRING, 3);
  static final TField _DATA_CONTENT_FIELD_DESC = new TField("dataContent", TType.STRING, 4);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _selfUserId;
  static const int SELFUSERID = 2;
  String _formatType;
  static const int FORMATTYPE = 3;
  Uint8List _dataContent;
  static const int DATACONTENT = 4;


  saveAvatar_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // selfUserId
  String get selfUserId => this._selfUserId;

  set selfUserId(String selfUserId) {
    this._selfUserId = selfUserId;
  }

  bool isSetSelfUserId() => this.selfUserId != null;

  unsetSelfUserId() {
    this.selfUserId = null;
  }

  // formatType
  String get formatType => this._formatType;

  set formatType(String formatType) {
    this._formatType = formatType;
  }

  bool isSetFormatType() => this.formatType != null;

  unsetFormatType() {
    this.formatType = null;
  }

  // dataContent
  Uint8List get dataContent => this._dataContent;

  set dataContent(Uint8List dataContent) {
    this._dataContent = dataContent;
  }

  bool isSetDataContent() => this.dataContent != null;

  unsetDataContent() {
    this.dataContent = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case SELFUSERID:
        return this.selfUserId;
      case FORMATTYPE:
        return this.formatType;
      case DATACONTENT:
        return this.dataContent;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case SELFUSERID:
        if (value == null) {
          unsetSelfUserId();
        } else {
          this.selfUserId = value;
        }
        break;

      case FORMATTYPE:
        if (value == null) {
          unsetFormatType();
        } else {
          this.formatType = value;
        }
        break;

      case DATACONTENT:
        if (value == null) {
          unsetDataContent();
        } else {
          this.dataContent = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case SELFUSERID:
        return isSetSelfUserId();
      case FORMATTYPE:
        return isSetFormatType();
      case DATACONTENT:
        return isSetDataContent();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SELFUSERID:
          if (field.type == TType.STRING) {
            this.selfUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FORMATTYPE:
          if (field.type == TType.STRING) {
            this.formatType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATACONTENT:
          if (field.type == TType.STRING) {
            this.dataContent = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.selfUserId != null) {
      oprot.writeFieldBegin(_SELF_USER_ID_FIELD_DESC);
      oprot.writeString(this.selfUserId);
      oprot.writeFieldEnd();
    }
    if (this.formatType != null) {
      oprot.writeFieldBegin(_FORMAT_TYPE_FIELD_DESC);
      oprot.writeString(this.formatType);
      oprot.writeFieldEnd();
    }
    if (this.dataContent != null) {
      oprot.writeFieldBegin(_DATA_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.dataContent);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("saveAvatar_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("selfUserId:");
    if (this.selfUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.selfUserId);
    }

    ret.write(", ");
    ret.write("formatType:");
    if (this.formatType == null) {
      ret.write("null");
    } else {
      ret.write(this.formatType);
    }

    ret.write(", ");
    ret.write("dataContent:");
    if (this.dataContent == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class saveAvatar_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("saveAvatar_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  String _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  saveAvatar_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("saveAvatar_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class validateAccount_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("validateAccount_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _USER_ACCOUNT_FIELD_DESC = new TField("userAccount", TType.STRING, 2);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _userAccount;
  static const int USERACCOUNT = 2;
  String _password;
  static const int PASSWORD = 3;


  validateAccount_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // userAccount
  String get userAccount => this._userAccount;

  set userAccount(String userAccount) {
    this._userAccount = userAccount;
  }

  bool isSetUserAccount() => this.userAccount != null;

  unsetUserAccount() {
    this.userAccount = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case USERACCOUNT:
        return this.userAccount;
      case PASSWORD:
        return this.password;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case USERACCOUNT:
        if (value == null) {
          unsetUserAccount();
        } else {
          this.userAccount = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case USERACCOUNT:
        return isSetUserAccount();
      case PASSWORD:
        return isSetPassword();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERACCOUNT:
          if (field.type == TType.STRING) {
            this.userAccount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.userAccount != null) {
      oprot.writeFieldBegin(_USER_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.userAccount);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("validateAccount_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("userAccount:");
    if (this.userAccount == null) {
      ret.write("null");
    } else {
      ret.write(this.userAccount);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class validateAccount_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("validateAccount_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  AccountInfo _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  validateAccount_result() {
  }

  // success
  AccountInfo get success => this._success;

  set success(AccountInfo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new AccountInfo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("validateAccount_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class editPassword_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("editPassword_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _OLDPWD_FIELD_DESC = new TField("oldpwd", TType.STRING, 2);
  static final TField _NEWPWD_FIELD_DESC = new TField("newpwd", TType.STRING, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _oldpwd;
  static const int OLDPWD = 2;
  String _newpwd;
  static const int NEWPWD = 3;


  editPassword_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // oldpwd
  String get oldpwd => this._oldpwd;

  set oldpwd(String oldpwd) {
    this._oldpwd = oldpwd;
  }

  bool isSetOldpwd() => this.oldpwd != null;

  unsetOldpwd() {
    this.oldpwd = null;
  }

  // newpwd
  String get newpwd => this._newpwd;

  set newpwd(String newpwd) {
    this._newpwd = newpwd;
  }

  bool isSetNewpwd() => this.newpwd != null;

  unsetNewpwd() {
    this.newpwd = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case OLDPWD:
        return this.oldpwd;
      case NEWPWD:
        return this.newpwd;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case OLDPWD:
        if (value == null) {
          unsetOldpwd();
        } else {
          this.oldpwd = value;
        }
        break;

      case NEWPWD:
        if (value == null) {
          unsetNewpwd();
        } else {
          this.newpwd = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case OLDPWD:
        return isSetOldpwd();
      case NEWPWD:
        return isSetNewpwd();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OLDPWD:
          if (field.type == TType.STRING) {
            this.oldpwd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEWPWD:
          if (field.type == TType.STRING) {
            this.newpwd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.oldpwd != null) {
      oprot.writeFieldBegin(_OLDPWD_FIELD_DESC);
      oprot.writeString(this.oldpwd);
      oprot.writeFieldEnd();
    }
    if (this.newpwd != null) {
      oprot.writeFieldBegin(_NEWPWD_FIELD_DESC);
      oprot.writeString(this.newpwd);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("editPassword_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("oldpwd:");
    if (this.oldpwd == null) {
      ret.write("null");
    } else {
      ret.write(this.oldpwd);
    }

    ret.write(", ");
    ret.write("newpwd:");
    if (this.newpwd == null) {
      ret.write("null");
    } else {
      ret.write(this.newpwd);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class editPassword_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("editPassword_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  editPassword_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("editPassword_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class editPersonName_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("editPersonName_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _REAL_NAME_FIELD_DESC = new TField("realName", TType.STRING, 2);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _realName;
  static const int REALNAME = 2;


  editPersonName_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // realName
  String get realName => this._realName;

  set realName(String realName) {
    this._realName = realName;
  }

  bool isSetRealName() => this.realName != null;

  unsetRealName() {
    this.realName = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case REALNAME:
        return this.realName;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case REALNAME:
        if (value == null) {
          unsetRealName();
        } else {
          this.realName = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case REALNAME:
        return isSetRealName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REALNAME:
          if (field.type == TType.STRING) {
            this.realName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.realName != null) {
      oprot.writeFieldBegin(_REAL_NAME_FIELD_DESC);
      oprot.writeString(this.realName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("editPersonName_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("realName:");
    if (this.realName == null) {
      ret.write("null");
    } else {
      ret.write(this.realName);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class editPersonName_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("editPersonName_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  bool _success = false;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;

  bool __isset_success = false;

  editPersonName_result() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBool(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("editPersonName_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class hasSecurityMobileNumber_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("hasSecurityMobileNumber_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;


  hasSecurityMobileNumber_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("hasSecurityMobileNumber_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class hasSecurityMobileNumber_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("hasSecurityMobileNumber_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  bool _success = false;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;

  bool __isset_success = false;

  hasSecurityMobileNumber_result() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBool(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("hasSecurityMobileNumber_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class bindSecurityMobileNumber_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("bindSecurityMobileNumber_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _MOBILE_NUMBER_FIELD_DESC = new TField("mobileNumber", TType.STRING, 2);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _mobileNumber;
  static const int MOBILENUMBER = 2;


  bindSecurityMobileNumber_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // mobileNumber
  String get mobileNumber => this._mobileNumber;

  set mobileNumber(String mobileNumber) {
    this._mobileNumber = mobileNumber;
  }

  bool isSetMobileNumber() => this.mobileNumber != null;

  unsetMobileNumber() {
    this.mobileNumber = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case MOBILENUMBER:
        return this.mobileNumber;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case MOBILENUMBER:
        if (value == null) {
          unsetMobileNumber();
        } else {
          this.mobileNumber = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case MOBILENUMBER:
        return isSetMobileNumber();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUMBER:
          if (field.type == TType.STRING) {
            this.mobileNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.mobileNumber != null) {
      oprot.writeFieldBegin(_MOBILE_NUMBER_FIELD_DESC);
      oprot.writeString(this.mobileNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("bindSecurityMobileNumber_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("mobileNumber:");
    if (this.mobileNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNumber);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class bindSecurityMobileNumber_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("bindSecurityMobileNumber_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  bool _success = false;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;

  bool __isset_success = false;

  bindSecurityMobileNumber_result() {
  }

  // success
  bool get success => this._success;

  set success(bool success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.BOOL) {
            this.success = iprot.readBool();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeBool(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("bindSecurityMobileNumber_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class hasSecurityVerification_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("hasSecurityVerification_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _PHR_CODE_FIELD_DESC = new TField("phrCode", TType.STRING, 2);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _phrCode;
  static const int PHRCODE = 2;


  hasSecurityVerification_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // phrCode
  String get phrCode => this._phrCode;

  set phrCode(String phrCode) {
    this._phrCode = phrCode;
  }

  bool isSetPhrCode() => this.phrCode != null;

  unsetPhrCode() {
    this.phrCode = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case PHRCODE:
        return this.phrCode;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case PHRCODE:
        if (value == null) {
          unsetPhrCode();
        } else {
          this.phrCode = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case PHRCODE:
        return isSetPhrCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHRCODE:
          if (field.type == TType.STRING) {
            this.phrCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.phrCode != null) {
      oprot.writeFieldBegin(_PHR_CODE_FIELD_DESC);
      oprot.writeString(this.phrCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("hasSecurityVerification_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("phrCode:");
    if (this.phrCode == null) {
      ret.write("null");
    } else {
      ret.write(this.phrCode);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class hasSecurityVerification_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("hasSecurityVerification_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I32, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  int _success = 0;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;

  bool __isset_success = false;

  hasSecurityVerification_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I32) {
            this.success = iprot.readI32();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("hasSecurityVerification_result(");

    ret.write("success:");
    ret.write(this.success);

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class retrievePassword_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrievePassword_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _PHONE_NUM_FIELD_DESC = new TField("phoneNum", TType.STRING, 2);
  static final TField _NEWPWD_FIELD_DESC = new TField("newpwd", TType.STRING, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _phoneNum;
  static const int PHONENUM = 2;
  String _newpwd;
  static const int NEWPWD = 3;


  retrievePassword_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // phoneNum
  String get phoneNum => this._phoneNum;

  set phoneNum(String phoneNum) {
    this._phoneNum = phoneNum;
  }

  bool isSetPhoneNum() => this.phoneNum != null;

  unsetPhoneNum() {
    this.phoneNum = null;
  }

  // newpwd
  String get newpwd => this._newpwd;

  set newpwd(String newpwd) {
    this._newpwd = newpwd;
  }

  bool isSetNewpwd() => this.newpwd != null;

  unsetNewpwd() {
    this.newpwd = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case PHONENUM:
        return this.phoneNum;
      case NEWPWD:
        return this.newpwd;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case PHONENUM:
        if (value == null) {
          unsetPhoneNum();
        } else {
          this.phoneNum = value;
        }
        break;

      case NEWPWD:
        if (value == null) {
          unsetNewpwd();
        } else {
          this.newpwd = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case PHONENUM:
        return isSetPhoneNum();
      case NEWPWD:
        return isSetNewpwd();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONENUM:
          if (field.type == TType.STRING) {
            this.phoneNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEWPWD:
          if (field.type == TType.STRING) {
            this.newpwd = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.phoneNum != null) {
      oprot.writeFieldBegin(_PHONE_NUM_FIELD_DESC);
      oprot.writeString(this.phoneNum);
      oprot.writeFieldEnd();
    }
    if (this.newpwd != null) {
      oprot.writeFieldBegin(_NEWPWD_FIELD_DESC);
      oprot.writeString(this.newpwd);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrievePassword_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("phoneNum:");
    if (this.phoneNum == null) {
      ret.write("null");
    } else {
      ret.write(this.phoneNum);
    }

    ret.write(", ");
    ret.write("newpwd:");
    if (this.newpwd == null) {
      ret.write("null");
    } else {
      ret.write(this.newpwd);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class retrievePassword_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrievePassword_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  retrievePassword_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrievePassword_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getReportInstruction_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getReportInstruction_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;


  getReportInstruction_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getReportInstruction_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getReportInstruction_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getReportInstruction_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  String _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  getReportInstruction_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getReportInstruction_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

