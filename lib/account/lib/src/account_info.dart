/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library account.src.account_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:account/account.dart';
import 'package:xkcm/xkcm.dart' as t_xkcm;

class AccountInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AccountInfo");
  static final TField _USER_ID_FIELD_DESC = new TField("userId", TType.STRING, 1);
  static final TField _EMAIL_FIELD_DESC = new TField("email", TType.STRING, 2);
  static final TField _MOBILE_NUM_FIELD_DESC = new TField("mobileNum", TType.STRING, 3);
  static final TField _USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, 4);
  static final TField _FIGURE_URL_FIELD_DESC = new TField("figureUrl", TType.STRING, 5);
  static final TField _ACCOUNT_FIELD_DESC = new TField("account", TType.STRING, 6);
  static final TField _GENDER_FIELD_DESC = new TField("gender", TType.I32, 7);

  String _userId;
  static const int USERID = 1;
  String _email;
  static const int EMAIL = 2;
  String _mobileNum;
  static const int MOBILENUM = 3;
  String _userName;
  static const int USERNAME = 4;
  String _figureUrl;
  static const int FIGUREURL = 5;
  String _account;
  static const int ACCOUNT = 6;
  int _gender;
  static const int GENDER = 7;

  bool __isset_gender = false;

  AccountInfo() {
  }

  // userId
  String get userId => this._userId;

  set userId(String userId) {
    this._userId = userId;
  }

  bool isSetUserId() => this.userId != null;

  unsetUserId() {
    this.userId = null;
  }

  // email
  String get email => this._email;

  set email(String email) {
    this._email = email;
  }

  bool isSetEmail() => this.email != null;

  unsetEmail() {
    this.email = null;
  }

  // mobileNum
  String get mobileNum => this._mobileNum;

  set mobileNum(String mobileNum) {
    this._mobileNum = mobileNum;
  }

  bool isSetMobileNum() => this.mobileNum != null;

  unsetMobileNum() {
    this.mobileNum = null;
  }

  // userName
  String get userName => this._userName;

  set userName(String userName) {
    this._userName = userName;
  }

  bool isSetUserName() => this.userName != null;

  unsetUserName() {
    this.userName = null;
  }

  // figureUrl
  String get figureUrl => this._figureUrl;

  set figureUrl(String figureUrl) {
    this._figureUrl = figureUrl;
  }

  bool isSetFigureUrl() => this.figureUrl != null;

  unsetFigureUrl() {
    this.figureUrl = null;
  }

  // account
  String get account => this._account;

  set account(String account) {
    this._account = account;
  }

  bool isSetAccount() => this.account != null;

  unsetAccount() {
    this.account = null;
  }

  // gender
  int get gender => this._gender;

  set gender(int gender) {
    this._gender = gender;
    this.__isset_gender = true;
  }

  bool isSetGender() => this.__isset_gender;

  unsetGender() {
    this.__isset_gender = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USERID:
        return this.userId;
      case EMAIL:
        return this.email;
      case MOBILENUM:
        return this.mobileNum;
      case USERNAME:
        return this.userName;
      case FIGUREURL:
        return this.figureUrl;
      case ACCOUNT:
        return this.account;
      case GENDER:
        return this.gender;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USERID:
        if (value == null) {
          unsetUserId();
        } else {
          this.userId = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case MOBILENUM:
        if (value == null) {
          unsetMobileNum();
        } else {
          this.mobileNum = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          this.userName = value;
        }
        break;

      case FIGUREURL:
        if (value == null) {
          unsetFigureUrl();
        } else {
          this.figureUrl = value;
        }
        break;

      case ACCOUNT:
        if (value == null) {
          unsetAccount();
        } else {
          this.account = value;
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          this.gender = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USERID:
        return isSetUserId();
      case EMAIL:
        return isSetEmail();
      case MOBILENUM:
        return isSetMobileNum();
      case USERNAME:
        return isSetUserName();
      case FIGUREURL:
        return isSetFigureUrl();
      case ACCOUNT:
        return isSetAccount();
      case GENDER:
        return isSetGender();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USERID:
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAIL:
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MOBILENUM:
          if (field.type == TType.STRING) {
            this.mobileNum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERNAME:
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FIGUREURL:
          if (field.type == TType.STRING) {
            this.figureUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCOUNT:
          if (field.type == TType.STRING) {
            this.account = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GENDER:
          if (field.type == TType.I32) {
            this.gender = iprot.readI32();
            this.__isset_gender = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.userId != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      oprot.writeFieldBegin(_EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.mobileNum != null) {
      oprot.writeFieldBegin(_MOBILE_NUM_FIELD_DESC);
      oprot.writeString(this.mobileNum);
      oprot.writeFieldEnd();
    }
    if (this.userName != null) {
      oprot.writeFieldBegin(_USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.figureUrl != null) {
      oprot.writeFieldBegin(_FIGURE_URL_FIELD_DESC);
      oprot.writeString(this.figureUrl);
      oprot.writeFieldEnd();
    }
    if (this.account != null) {
      oprot.writeFieldBegin(_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.account);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_GENDER_FIELD_DESC);
    oprot.writeI32(this.gender);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AccountInfo(");

    ret.write("userId:");
    if (this.userId == null) {
      ret.write("null");
    } else {
      ret.write(this.userId);
    }

    ret.write(", ");
    ret.write("email:");
    if (this.email == null) {
      ret.write("null");
    } else {
      ret.write(this.email);
    }

    ret.write(", ");
    ret.write("mobileNum:");
    if (this.mobileNum == null) {
      ret.write("null");
    } else {
      ret.write(this.mobileNum);
    }

    ret.write(", ");
    ret.write("userName:");
    if (this.userName == null) {
      ret.write("null");
    } else {
      ret.write(this.userName);
    }

    ret.write(", ");
    ret.write("figureUrl:");
    if (this.figureUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.figureUrl);
    }

    ret.write(", ");
    ret.write("account:");
    if (this.account == null) {
      ret.write("null");
    } else {
      ret.write(this.account);
    }

    ret.write(", ");
    ret.write("gender:");
    String gender_name = Gender.VALUES_TO_NAMES[this.gender];
    if (gender_name != null) {
      ret.write(gender_name);
      ret.write(" (");
    }
    ret.write(this.gender);
    if (gender_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetGender() && !Gender.VALID_VALUES.contains(gender)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'gender' has been assigned the invalid value $gender");
    }
  }

}

