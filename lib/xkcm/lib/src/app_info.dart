/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library xkcm.src.app_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:xkcm/xkcm.dart';

class AppInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AppInfo");
  static final TField _APP_ID_FIELD_DESC = new TField("appId", TType.STRING, 1);
  static final TField _APP_VERSION_FIELD_DESC = new TField("appVersion", TType.STRING, 2);

  String _appId;
  static const int APPID = 1;
  String _appVersion;
  static const int APPVERSION = 2;


  AppInfo() {
  }

  // appId
  String get appId => this._appId;

  set appId(String appId) {
    this._appId = appId;
  }

  bool isSetAppId() => this.appId != null;

  unsetAppId() {
    this.appId = null;
  }

  // appVersion
  String get appVersion => this._appVersion;

  set appVersion(String appVersion) {
    this._appVersion = appVersion;
  }

  bool isSetAppVersion() => this.appVersion != null;

  unsetAppVersion() {
    this.appVersion = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case APPID:
        return this.appId;
      case APPVERSION:
        return this.appVersion;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case APPID:
        if (value == null) {
          unsetAppId();
        } else {
          this.appId = value;
        }
        break;

      case APPVERSION:
        if (value == null) {
          unsetAppVersion();
        } else {
          this.appVersion = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case APPID:
        return isSetAppId();
      case APPVERSION:
        return isSetAppVersion();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case APPID:
          if (field.type == TType.STRING) {
            this.appId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPVERSION:
          if (field.type == TType.STRING) {
            this.appVersion = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.appId != null) {
      oprot.writeFieldBegin(_APP_ID_FIELD_DESC);
      oprot.writeString(this.appId);
      oprot.writeFieldEnd();
    }
    if (this.appVersion != null) {
      oprot.writeFieldBegin(_APP_VERSION_FIELD_DESC);
      oprot.writeString(this.appVersion);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AppInfo(");

    ret.write("appId:");
    if (this.appId == null) {
      ret.write("null");
    } else {
      ret.write(this.appId);
    }

    ret.write(", ");
    ret.write("appVersion:");
    if (this.appVersion == null) {
      ret.write("null");
    } else {
      ret.write(this.appVersion);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

