/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library xkcm.src.terminal_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:xkcm/xkcm.dart';

class TerminalInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TerminalInfo");
  static final TField _DEVICE_TYPE_FIELD_DESC = new TField("deviceType", TType.I32, 1);
  static final TField _DEVICE_ID_FIELD_DESC = new TField("deviceId", TType.STRING, 2);
  static final TField _OS_VERSION_FIELD_DESC = new TField("OsVersion", TType.STRING, 3);
  static final TField _DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRING, 4);

  int _deviceType;
  static const int DEVICETYPE = 1;
  String _deviceId;
  static const int DEVICEID = 2;
  String _osVersion;
  static const int OSVERSION = 3;
  String _deviceInfo;
  static const int DEVICEINFO = 4;

  bool __isset_deviceType = false;

  TerminalInfo() {
  }

  // deviceType
  int get deviceType => this._deviceType;

  set deviceType(int deviceType) {
    this._deviceType = deviceType;
    this.__isset_deviceType = true;
  }

  bool isSetDeviceType() => this.__isset_deviceType;

  unsetDeviceType() {
    this.__isset_deviceType = false;
  }

  // deviceId
  String get deviceId => this._deviceId;

  set deviceId(String deviceId) {
    this._deviceId = deviceId;
  }

  bool isSetDeviceId() => this.deviceId != null;

  unsetDeviceId() {
    this.deviceId = null;
  }

  // osVersion
  String get osVersion => this._osVersion;

  set osVersion(String osVersion) {
    this._osVersion = osVersion;
  }

  bool isSetOsVersion() => this.osVersion != null;

  unsetOsVersion() {
    this.osVersion = null;
  }

  // deviceInfo
  String get deviceInfo => this._deviceInfo;

  set deviceInfo(String deviceInfo) {
    this._deviceInfo = deviceInfo;
  }

  bool isSetDeviceInfo() => this.deviceInfo != null;

  unsetDeviceInfo() {
    this.deviceInfo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DEVICETYPE:
        return this.deviceType;
      case DEVICEID:
        return this.deviceId;
      case OSVERSION:
        return this.osVersion;
      case DEVICEINFO:
        return this.deviceInfo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DEVICETYPE:
        if (value == null) {
          unsetDeviceType();
        } else {
          this.deviceType = value;
        }
        break;

      case DEVICEID:
        if (value == null) {
          unsetDeviceId();
        } else {
          this.deviceId = value;
        }
        break;

      case OSVERSION:
        if (value == null) {
          unsetOsVersion();
        } else {
          this.osVersion = value;
        }
        break;

      case DEVICEINFO:
        if (value == null) {
          unsetDeviceInfo();
        } else {
          this.deviceInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DEVICETYPE:
        return isSetDeviceType();
      case DEVICEID:
        return isSetDeviceId();
      case OSVERSION:
        return isSetOsVersion();
      case DEVICEINFO:
        return isSetDeviceInfo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DEVICETYPE:
          if (field.type == TType.I32) {
            this.deviceType = iprot.readI32();
            this.__isset_deviceType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEVICEID:
          if (field.type == TType.STRING) {
            this.deviceId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OSVERSION:
          if (field.type == TType.STRING) {
            this.osVersion = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEVICEINFO:
          if (field.type == TType.STRING) {
            this.deviceInfo = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_DEVICE_TYPE_FIELD_DESC);
    oprot.writeI32(this.deviceType);
    oprot.writeFieldEnd();
    if (this.deviceId != null) {
      oprot.writeFieldBegin(_DEVICE_ID_FIELD_DESC);
      oprot.writeString(this.deviceId);
      oprot.writeFieldEnd();
    }
    if (this.osVersion != null) {
      oprot.writeFieldBegin(_OS_VERSION_FIELD_DESC);
      oprot.writeString(this.osVersion);
      oprot.writeFieldEnd();
    }
    if (this.deviceInfo != null) {
      oprot.writeFieldBegin(_DEVICE_INFO_FIELD_DESC);
      oprot.writeString(this.deviceInfo);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TerminalInfo(");

    ret.write("deviceType:");
    String deviceType_name = DeviceType.VALUES_TO_NAMES[this.deviceType];
    if (deviceType_name != null) {
      ret.write(deviceType_name);
      ret.write(" (");
    }
    ret.write(this.deviceType);
    if (deviceType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("deviceId:");
    if (this.deviceId == null) {
      ret.write("null");
    } else {
      ret.write(this.deviceId);
    }

    ret.write(", ");
    ret.write("osVersion:");
    if (this.osVersion == null) {
      ret.write("null");
    } else {
      ret.write(this.osVersion);
    }

    ret.write(", ");
    ret.write("deviceInfo:");
    if (this.deviceInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.deviceInfo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetDeviceType() && !DeviceType.VALID_VALUES.contains(deviceType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'deviceType' has been assigned the invalid value $deviceType");
    }
  }

}

