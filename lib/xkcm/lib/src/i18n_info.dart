/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library xkcm.src.i18n_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:xkcm/xkcm.dart';

class I18nInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("I18nInfo");
  static final TField _REGION_FIELD_DESC = new TField("region", TType.I32, 1);
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.I32, 2);
  static final TField _AREA_NAME_FIELD_DESC = new TField("areaName", TType.STRING, 3);

  int _region;
  static const int REGION = 1;
  int _language;
  static const int LANGUAGE = 2;
  String _areaName;
  static const int AREANAME = 3;

  bool __isset_region = false;
  bool __isset_language = false;

  I18nInfo() {
  }

  // region
  int get region => this._region;

  set region(int region) {
    this._region = region;
    this.__isset_region = true;
  }

  bool isSetRegion() => this.__isset_region;

  unsetRegion() {
    this.__isset_region = false;
  }

  // language
  int get language => this._language;

  set language(int language) {
    this._language = language;
    this.__isset_language = true;
  }

  bool isSetLanguage() => this.__isset_language;

  unsetLanguage() {
    this.__isset_language = false;
  }

  // areaName
  String get areaName => this._areaName;

  set areaName(String areaName) {
    this._areaName = areaName;
  }

  bool isSetAreaName() => this.areaName != null;

  unsetAreaName() {
    this.areaName = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REGION:
        return this.region;
      case LANGUAGE:
        return this.language;
      case AREANAME:
        return this.areaName;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          this.region = value;
        }
        break;

      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case AREANAME:
        if (value == null) {
          unsetAreaName();
        } else {
          this.areaName = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REGION:
        return isSetRegion();
      case LANGUAGE:
        return isSetLanguage();
      case AREANAME:
        return isSetAreaName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REGION:
          if (field.type == TType.I32) {
            this.region = iprot.readI32();
            this.__isset_region = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LANGUAGE:
          if (field.type == TType.I32) {
            this.language = iprot.readI32();
            this.__isset_language = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AREANAME:
          if (field.type == TType.STRING) {
            this.areaName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_REGION_FIELD_DESC);
    oprot.writeI32(this.region);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
    oprot.writeI32(this.language);
    oprot.writeFieldEnd();
    if (this.areaName != null) {
      oprot.writeFieldBegin(_AREA_NAME_FIELD_DESC);
      oprot.writeString(this.areaName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("I18nInfo(");

    ret.write("region:");
    String region_name = Region.VALUES_TO_NAMES[this.region];
    if (region_name != null) {
      ret.write(region_name);
      ret.write(" (");
    }
    ret.write(this.region);
    if (region_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("language:");
    String language_name = Language.VALUES_TO_NAMES[this.language];
    if (language_name != null) {
      ret.write(language_name);
      ret.write(" (");
    }
    ret.write(this.language);
    if (language_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("areaName:");
    if (this.areaName == null) {
      ret.write("null");
    } else {
      ret.write(this.areaName);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetRegion() && !Region.VALID_VALUES.contains(region)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'region' has been assigned the invalid value $region");
    }
    if (isSetLanguage() && !Language.VALID_VALUES.contains(language)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'language' has been assigned the invalid value $language");
    }
  }

}

