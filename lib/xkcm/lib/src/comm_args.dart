/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library xkcm.src.comm_args;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:xkcm/xkcm.dart';

class CommArgs implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CommArgs");
  static final TField _TERMINAL_INFO_FIELD_DESC = new TField("terminalInfo", TType.STRUCT, 1);
  static final TField _APP_INFO_FIELD_DESC = new TField("appInfo", TType.STRUCT, 2);
  static final TField _USER_ID_FIELD_DESC = new TField("userId", TType.STRING, 3);
  static final TField _I18N_INFO_FIELD_DESC = new TField("i18nInfo", TType.STRUCT, 4);
  static final TField _AUTH_MODE_FIELD_DESC = new TField("authMode", TType.I32, 5);
  static final TField _DIGEST_AUTHENTICATION_REQ_FIELD_DESC = new TField("digestAuthenticationReq", TType.STRUCT, 6);
  static final TField _CHECK_VERSION_FIELD_DESC = new TField("checkVersion", TType.BOOL, 7);

  TerminalInfo _terminalInfo;
  static const int TERMINALINFO = 1;
  AppInfo _appInfo;
  static const int APPINFO = 2;
  String _userId;
  static const int USERID = 3;
  I18nInfo _i18nInfo;
  static const int I18NINFO = 4;
  int _authMode;
  static const int AUTHMODE = 5;
  DigestAuthenticationReq _digestAuthenticationReq;
  static const int DIGESTAUTHENTICATIONREQ = 6;
  bool _checkVersion = false;
  static const int CHECKVERSION = 7;

  bool __isset_authMode = false;
  bool __isset_checkVersion = false;

  CommArgs() {
  }

  // terminalInfo
  TerminalInfo get terminalInfo => this._terminalInfo;

  set terminalInfo(TerminalInfo terminalInfo) {
    this._terminalInfo = terminalInfo;
  }

  bool isSetTerminalInfo() => this.terminalInfo != null;

  unsetTerminalInfo() {
    this.terminalInfo = null;
  }

  // appInfo
  AppInfo get appInfo => this._appInfo;

  set appInfo(AppInfo appInfo) {
    this._appInfo = appInfo;
  }

  bool isSetAppInfo() => this.appInfo != null;

  unsetAppInfo() {
    this.appInfo = null;
  }

  // userId
  String get userId => this._userId;

  set userId(String userId) {
    this._userId = userId;
  }

  bool isSetUserId() => this.userId != null;

  unsetUserId() {
    this.userId = null;
  }

  // i18nInfo
  I18nInfo get i18nInfo => this._i18nInfo;

  set i18nInfo(I18nInfo i18nInfo) {
    this._i18nInfo = i18nInfo;
  }

  bool isSetI18nInfo() => this.i18nInfo != null;

  unsetI18nInfo() {
    this.i18nInfo = null;
  }

  // authMode
  int get authMode => this._authMode;

  set authMode(int authMode) {
    this._authMode = authMode;
    this.__isset_authMode = true;
  }

  bool isSetAuthMode() => this.__isset_authMode;

  unsetAuthMode() {
    this.__isset_authMode = false;
  }

  // digestAuthenticationReq
  DigestAuthenticationReq get digestAuthenticationReq => this._digestAuthenticationReq;

  set digestAuthenticationReq(DigestAuthenticationReq digestAuthenticationReq) {
    this._digestAuthenticationReq = digestAuthenticationReq;
  }

  bool isSetDigestAuthenticationReq() => this.digestAuthenticationReq != null;

  unsetDigestAuthenticationReq() {
    this.digestAuthenticationReq = null;
  }

  // checkVersion
  bool get checkVersion => this._checkVersion;

  set checkVersion(bool checkVersion) {
    this._checkVersion = checkVersion;
    this.__isset_checkVersion = true;
  }

  bool isSetCheckVersion() => this.__isset_checkVersion;

  unsetCheckVersion() {
    this.__isset_checkVersion = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TERMINALINFO:
        return this.terminalInfo;
      case APPINFO:
        return this.appInfo;
      case USERID:
        return this.userId;
      case I18NINFO:
        return this.i18nInfo;
      case AUTHMODE:
        return this.authMode;
      case DIGESTAUTHENTICATIONREQ:
        return this.digestAuthenticationReq;
      case CHECKVERSION:
        return this.checkVersion;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TERMINALINFO:
        if (value == null) {
          unsetTerminalInfo();
        } else {
          this.terminalInfo = value;
        }
        break;

      case APPINFO:
        if (value == null) {
          unsetAppInfo();
        } else {
          this.appInfo = value;
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserId();
        } else {
          this.userId = value;
        }
        break;

      case I18NINFO:
        if (value == null) {
          unsetI18nInfo();
        } else {
          this.i18nInfo = value;
        }
        break;

      case AUTHMODE:
        if (value == null) {
          unsetAuthMode();
        } else {
          this.authMode = value;
        }
        break;

      case DIGESTAUTHENTICATIONREQ:
        if (value == null) {
          unsetDigestAuthenticationReq();
        } else {
          this.digestAuthenticationReq = value;
        }
        break;

      case CHECKVERSION:
        if (value == null) {
          unsetCheckVersion();
        } else {
          this.checkVersion = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TERMINALINFO:
        return isSetTerminalInfo();
      case APPINFO:
        return isSetAppInfo();
      case USERID:
        return isSetUserId();
      case I18NINFO:
        return isSetI18nInfo();
      case AUTHMODE:
        return isSetAuthMode();
      case DIGESTAUTHENTICATIONREQ:
        return isSetDigestAuthenticationReq();
      case CHECKVERSION:
        return isSetCheckVersion();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TERMINALINFO:
          if (field.type == TType.STRUCT) {
            this.terminalInfo = new TerminalInfo();
            this.terminalInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPINFO:
          if (field.type == TType.STRUCT) {
            this.appInfo = new AppInfo();
            this.appInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERID:
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I18NINFO:
          if (field.type == TType.STRUCT) {
            this.i18nInfo = new I18nInfo();
            this.i18nInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHMODE:
          if (field.type == TType.I32) {
            this.authMode = iprot.readI32();
            this.__isset_authMode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIGESTAUTHENTICATIONREQ:
          if (field.type == TType.STRUCT) {
            this.digestAuthenticationReq = new DigestAuthenticationReq();
            this.digestAuthenticationReq.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHECKVERSION:
          if (field.type == TType.BOOL) {
            this.checkVersion = iprot.readBool();
            this.__isset_checkVersion = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.terminalInfo != null) {
      oprot.writeFieldBegin(_TERMINAL_INFO_FIELD_DESC);
      this.terminalInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.appInfo != null) {
      oprot.writeFieldBegin(_APP_INFO_FIELD_DESC);
      this.appInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.userId != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.i18nInfo != null) {
      oprot.writeFieldBegin(_I18N_INFO_FIELD_DESC);
      this.i18nInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_AUTH_MODE_FIELD_DESC);
    oprot.writeI32(this.authMode);
    oprot.writeFieldEnd();
    if (this.digestAuthenticationReq != null) {
      oprot.writeFieldBegin(_DIGEST_AUTHENTICATION_REQ_FIELD_DESC);
      this.digestAuthenticationReq.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CHECK_VERSION_FIELD_DESC);
    oprot.writeBool(this.checkVersion);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CommArgs(");

    ret.write("terminalInfo:");
    if (this.terminalInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.terminalInfo);
    }

    ret.write(", ");
    ret.write("appInfo:");
    if (this.appInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.appInfo);
    }

    ret.write(", ");
    ret.write("userId:");
    if (this.userId == null) {
      ret.write("null");
    } else {
      ret.write(this.userId);
    }

    ret.write(", ");
    ret.write("i18nInfo:");
    if (this.i18nInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.i18nInfo);
    }

    ret.write(", ");
    ret.write("authMode:");
    String authMode_name = AuthMode.VALUES_TO_NAMES[this.authMode];
    if (authMode_name != null) {
      ret.write(authMode_name);
      ret.write(" (");
    }
    ret.write(this.authMode);
    if (authMode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("digestAuthenticationReq:");
    if (this.digestAuthenticationReq == null) {
      ret.write("null");
    } else {
      ret.write(this.digestAuthenticationReq);
    }

    ret.write(", ");
    ret.write("checkVersion:");
    ret.write(this.checkVersion);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAuthMode() && !AuthMode.VALID_VALUES.contains(authMode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'authMode' has been assigned the invalid value $authMode");
    }
  }

}

