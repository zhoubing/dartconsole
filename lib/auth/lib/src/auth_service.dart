/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library auth.src.auth_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:auth/auth.dart';
import 'package:xkcm/xkcm.dart' as t_xkcm;


abstract class AuthService {

  Future<LoginResult> login(t_xkcm.CommArgs commArgs, String userAccount, String password, LoginExtInfo loginExtInfo, int userType);

  Future<LoginResult> loginWithOpendID(t_xkcm.CommArgs commArgs, OpenAccountInfo openAccountInfo, LoginExtInfo loginExtInfo);

  Future heartbeat(t_xkcm.CommArgs commArgs);

  Future logout(t_xkcm.CommArgs commArgs, LogoutExtInfo logoutExtInfo);
}

class AuthServiceClient implements AuthService {

  AuthServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<LoginResult> login(t_xkcm.CommArgs commArgs, String userAccount, String password, LoginExtInfo loginExtInfo, int userType) async {
    oprot.writeMessageBegin(new TMessage("login", TMessageType.CALL, nextSeqid()));
    login_args args = new login_args();
    args.commArgs = commArgs;
    args.userAccount = userAccount;
    args.password = password;
    args.loginExtInfo = loginExtInfo;
    args.userType = userType;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    login_result result = new login_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "login failed: unknown result");
  }

  Future<LoginResult> loginWithOpendID(t_xkcm.CommArgs commArgs, OpenAccountInfo openAccountInfo, LoginExtInfo loginExtInfo) async {
    oprot.writeMessageBegin(new TMessage("loginWithOpendID", TMessageType.CALL, nextSeqid()));
    loginWithOpendID_args args = new loginWithOpendID_args();
    args.commArgs = commArgs;
    args.openAccountInfo = openAccountInfo;
    args.loginExtInfo = loginExtInfo;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    loginWithOpendID_result result = new loginWithOpendID_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "loginWithOpendID failed: unknown result");
  }

  Future heartbeat(t_xkcm.CommArgs commArgs) async {
    oprot.writeMessageBegin(new TMessage("heartbeat", TMessageType.CALL, nextSeqid()));
    heartbeat_args args = new heartbeat_args();
    args.commArgs = commArgs;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    heartbeat_result result = new heartbeat_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

  Future logout(t_xkcm.CommArgs commArgs, LogoutExtInfo logoutExtInfo) async {
    oprot.writeMessageBegin(new TMessage("logout", TMessageType.CALL, nextSeqid()));
    logout_args args = new logout_args();
    args.commArgs = commArgs;
    args.logoutExtInfo = logoutExtInfo;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    logout_result result = new logout_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.ae != null) {
      throw result.ae;
    }
    if (result.be != null) {
      throw result.be;
    }
    return;
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class AuthServiceProcessor implements TProcessor {
  AuthServiceProcessor(AuthService iface) {
    iface_ = iface;
    PROCESS_MAP["login"] = login;
    PROCESS_MAP["loginWithOpendID"] = loginWithOpendID;
    PROCESS_MAP["heartbeat"] = heartbeat;
    PROCESS_MAP["logout"] = logout;
  }

  AuthService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  login(int seqid, TProtocol iprot, TProtocol oprot) async {
    login_args args = new login_args();
    args.read(iprot);
    iprot.readMessageEnd();
    login_result result = new login_result();
    try {
      result.success = await iface_.login(args.commArgs, args.userAccount, args.password, args.loginExtInfo, args.userType);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing login");
      oprot.writeMessageBegin(new TMessage("login", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("login", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  loginWithOpendID(int seqid, TProtocol iprot, TProtocol oprot) async {
    loginWithOpendID_args args = new loginWithOpendID_args();
    args.read(iprot);
    iprot.readMessageEnd();
    loginWithOpendID_result result = new loginWithOpendID_result();
    try {
      result.success = await iface_.loginWithOpendID(args.commArgs, args.openAccountInfo, args.loginExtInfo);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing loginWithOpendID");
      oprot.writeMessageBegin(new TMessage("loginWithOpendID", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("loginWithOpendID", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  heartbeat(int seqid, TProtocol iprot, TProtocol oprot) {
    heartbeat_args args = new heartbeat_args();
    args.read(iprot);
    iprot.readMessageEnd();
    heartbeat_result result = new heartbeat_result();
    try {
      iface_.heartbeat(args.commArgs);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing heartbeat");
      oprot.writeMessageBegin(new TMessage("heartbeat", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("heartbeat", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  logout(int seqid, TProtocol iprot, TProtocol oprot) {
    logout_args args = new logout_args();
    args.read(iprot);
    iprot.readMessageEnd();
    logout_result result = new logout_result();
    try {
      iface_.logout(args.commArgs, args.logoutExtInfo);
    } on t_xkcm.AuthException catch(ae) {
      result.ae = ae;
    } on t_xkcm.BizException catch(be) {
      result.be = be;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing logout");
      oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("logout", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class login_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("login_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _USER_ACCOUNT_FIELD_DESC = new TField("userAccount", TType.STRING, 2);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 3);
  static final TField _LOGIN_EXT_INFO_FIELD_DESC = new TField("loginExtInfo", TType.STRUCT, 4);
  static final TField _USER_TYPE_FIELD_DESC = new TField("userType", TType.I32, 5);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  String _userAccount;
  static const int USERACCOUNT = 2;
  String _password;
  static const int PASSWORD = 3;
  LoginExtInfo _loginExtInfo;
  static const int LOGINEXTINFO = 4;
  int _userType;
  static const int USERTYPE = 5;

  bool __isset_userType = false;

  login_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // userAccount
  String get userAccount => this._userAccount;

  set userAccount(String userAccount) {
    this._userAccount = userAccount;
  }

  bool isSetUserAccount() => this.userAccount != null;

  unsetUserAccount() {
    this.userAccount = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  // loginExtInfo
  LoginExtInfo get loginExtInfo => this._loginExtInfo;

  set loginExtInfo(LoginExtInfo loginExtInfo) {
    this._loginExtInfo = loginExtInfo;
  }

  bool isSetLoginExtInfo() => this.loginExtInfo != null;

  unsetLoginExtInfo() {
    this.loginExtInfo = null;
  }

  // userType
  int get userType => this._userType;

  set userType(int userType) {
    this._userType = userType;
    this.__isset_userType = true;
  }

  bool isSetUserType() => this.__isset_userType;

  unsetUserType() {
    this.__isset_userType = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case USERACCOUNT:
        return this.userAccount;
      case PASSWORD:
        return this.password;
      case LOGINEXTINFO:
        return this.loginExtInfo;
      case USERTYPE:
        return this.userType;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case USERACCOUNT:
        if (value == null) {
          unsetUserAccount();
        } else {
          this.userAccount = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      case LOGINEXTINFO:
        if (value == null) {
          unsetLoginExtInfo();
        } else {
          this.loginExtInfo = value;
        }
        break;

      case USERTYPE:
        if (value == null) {
          unsetUserType();
        } else {
          this.userType = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case USERACCOUNT:
        return isSetUserAccount();
      case PASSWORD:
        return isSetPassword();
      case LOGINEXTINFO:
        return isSetLoginExtInfo();
      case USERTYPE:
        return isSetUserType();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERACCOUNT:
          if (field.type == TType.STRING) {
            this.userAccount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOGINEXTINFO:
          if (field.type == TType.STRUCT) {
            this.loginExtInfo = new LoginExtInfo();
            this.loginExtInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERTYPE:
          if (field.type == TType.I32) {
            this.userType = iprot.readI32();
            this.__isset_userType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.userAccount != null) {
      oprot.writeFieldBegin(_USER_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.userAccount);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    if (this.loginExtInfo != null) {
      oprot.writeFieldBegin(_LOGIN_EXT_INFO_FIELD_DESC);
      this.loginExtInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_USER_TYPE_FIELD_DESC);
    oprot.writeI32(this.userType);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("login_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("userAccount:");
    if (this.userAccount == null) {
      ret.write("null");
    } else {
      ret.write(this.userAccount);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(", ");
    ret.write("loginExtInfo:");
    if (this.loginExtInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.loginExtInfo);
    }

    ret.write(", ");
    ret.write("userType:");
    String userType_name = UserType.VALUES_TO_NAMES[this.userType];
    if (userType_name != null) {
      ret.write(userType_name);
      ret.write(" (");
    }
    ret.write(this.userType);
    if (userType_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetUserType() && !UserType.VALID_VALUES.contains(userType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'userType' has been assigned the invalid value $userType");
    }
  }

}

class login_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("login_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  LoginResult _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  login_result() {
  }

  // success
  LoginResult get success => this._success;

  set success(LoginResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new LoginResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("login_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class loginWithOpendID_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("loginWithOpendID_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _OPEN_ACCOUNT_INFO_FIELD_DESC = new TField("openAccountInfo", TType.STRUCT, 2);
  static final TField _LOGIN_EXT_INFO_FIELD_DESC = new TField("loginExtInfo", TType.STRUCT, 3);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  OpenAccountInfo _openAccountInfo;
  static const int OPENACCOUNTINFO = 2;
  LoginExtInfo _loginExtInfo;
  static const int LOGINEXTINFO = 3;


  loginWithOpendID_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // openAccountInfo
  OpenAccountInfo get openAccountInfo => this._openAccountInfo;

  set openAccountInfo(OpenAccountInfo openAccountInfo) {
    this._openAccountInfo = openAccountInfo;
  }

  bool isSetOpenAccountInfo() => this.openAccountInfo != null;

  unsetOpenAccountInfo() {
    this.openAccountInfo = null;
  }

  // loginExtInfo
  LoginExtInfo get loginExtInfo => this._loginExtInfo;

  set loginExtInfo(LoginExtInfo loginExtInfo) {
    this._loginExtInfo = loginExtInfo;
  }

  bool isSetLoginExtInfo() => this.loginExtInfo != null;

  unsetLoginExtInfo() {
    this.loginExtInfo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case OPENACCOUNTINFO:
        return this.openAccountInfo;
      case LOGINEXTINFO:
        return this.loginExtInfo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case OPENACCOUNTINFO:
        if (value == null) {
          unsetOpenAccountInfo();
        } else {
          this.openAccountInfo = value;
        }
        break;

      case LOGINEXTINFO:
        if (value == null) {
          unsetLoginExtInfo();
        } else {
          this.loginExtInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case OPENACCOUNTINFO:
        return isSetOpenAccountInfo();
      case LOGINEXTINFO:
        return isSetLoginExtInfo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OPENACCOUNTINFO:
          if (field.type == TType.STRUCT) {
            this.openAccountInfo = new OpenAccountInfo();
            this.openAccountInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOGINEXTINFO:
          if (field.type == TType.STRUCT) {
            this.loginExtInfo = new LoginExtInfo();
            this.loginExtInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.openAccountInfo != null) {
      oprot.writeFieldBegin(_OPEN_ACCOUNT_INFO_FIELD_DESC);
      this.openAccountInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.loginExtInfo != null) {
      oprot.writeFieldBegin(_LOGIN_EXT_INFO_FIELD_DESC);
      this.loginExtInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("loginWithOpendID_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("openAccountInfo:");
    if (this.openAccountInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.openAccountInfo);
    }

    ret.write(", ");
    ret.write("loginExtInfo:");
    if (this.loginExtInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.loginExtInfo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class loginWithOpendID_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("loginWithOpendID_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  LoginResult _success;
  static const int SUCCESS = 0;
  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  loginWithOpendID_result() {
  }

  // success
  LoginResult get success => this._success;

  set success(LoginResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new LoginResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("loginWithOpendID_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class heartbeat_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("heartbeat_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;


  heartbeat_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("heartbeat_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class heartbeat_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("heartbeat_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  heartbeat_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("heartbeat_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class logout_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("logout_args");
  static final TField _COMM_ARGS_FIELD_DESC = new TField("commArgs", TType.STRUCT, 1);
  static final TField _LOGOUT_EXT_INFO_FIELD_DESC = new TField("logoutExtInfo", TType.STRUCT, 2);

  t_xkcm.CommArgs _commArgs;
  static const int COMMARGS = 1;
  LogoutExtInfo _logoutExtInfo;
  static const int LOGOUTEXTINFO = 2;


  logout_args() {
  }

  // commArgs
  t_xkcm.CommArgs get commArgs => this._commArgs;

  set commArgs(t_xkcm.CommArgs commArgs) {
    this._commArgs = commArgs;
  }

  bool isSetCommArgs() => this.commArgs != null;

  unsetCommArgs() {
    this.commArgs = null;
  }

  // logoutExtInfo
  LogoutExtInfo get logoutExtInfo => this._logoutExtInfo;

  set logoutExtInfo(LogoutExtInfo logoutExtInfo) {
    this._logoutExtInfo = logoutExtInfo;
  }

  bool isSetLogoutExtInfo() => this.logoutExtInfo != null;

  unsetLogoutExtInfo() {
    this.logoutExtInfo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return this.commArgs;
      case LOGOUTEXTINFO:
        return this.logoutExtInfo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COMMARGS:
        if (value == null) {
          unsetCommArgs();
        } else {
          this.commArgs = value;
        }
        break;

      case LOGOUTEXTINFO:
        if (value == null) {
          unsetLogoutExtInfo();
        } else {
          this.logoutExtInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COMMARGS:
        return isSetCommArgs();
      case LOGOUTEXTINFO:
        return isSetLogoutExtInfo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COMMARGS:
          if (field.type == TType.STRUCT) {
            this.commArgs = new t_xkcm.CommArgs();
            this.commArgs.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOGOUTEXTINFO:
          if (field.type == TType.STRUCT) {
            this.logoutExtInfo = new LogoutExtInfo();
            this.logoutExtInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.commArgs != null) {
      oprot.writeFieldBegin(_COMM_ARGS_FIELD_DESC);
      this.commArgs.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.logoutExtInfo != null) {
      oprot.writeFieldBegin(_LOGOUT_EXT_INFO_FIELD_DESC);
      this.logoutExtInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("logout_args(");

    ret.write("commArgs:");
    if (this.commArgs == null) {
      ret.write("null");
    } else {
      ret.write(this.commArgs);
    }

    ret.write(", ");
    ret.write("logoutExtInfo:");
    if (this.logoutExtInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.logoutExtInfo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class logout_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("logout_result");
  static final TField _AE_FIELD_DESC = new TField("ae", TType.STRUCT, 1);
  static final TField _BE_FIELD_DESC = new TField("be", TType.STRUCT, 2);

  t_xkcm.AuthException _ae;
  static const int AE = 1;
  t_xkcm.BizException _be;
  static const int BE = 2;


  logout_result() {
  }

  // ae
  t_xkcm.AuthException get ae => this._ae;

  set ae(t_xkcm.AuthException ae) {
    this._ae = ae;
  }

  bool isSetAe() => this.ae != null;

  unsetAe() {
    this.ae = null;
  }

  // be
  t_xkcm.BizException get be => this._be;

  set be(t_xkcm.BizException be) {
    this._be = be;
  }

  bool isSetBe() => this.be != null;

  unsetBe() {
    this.be = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AE:
        return this.ae;
      case BE:
        return this.be;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AE:
        if (value == null) {
          unsetAe();
        } else {
          this.ae = value;
        }
        break;

      case BE:
        if (value == null) {
          unsetBe();
        } else {
          this.be = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AE:
        return isSetAe();
      case BE:
        return isSetBe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AE:
          if (field.type == TType.STRUCT) {
            this.ae = new t_xkcm.AuthException();
            this.ae.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BE:
          if (field.type == TType.STRUCT) {
            this.be = new t_xkcm.BizException();
            this.be.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetAe()) {
      oprot.writeFieldBegin(_AE_FIELD_DESC);
      this.ae.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetBe()) {
      oprot.writeFieldBegin(_BE_FIELD_DESC);
      this.be.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("logout_result(");

    ret.write("ae:");
    if (this.ae == null) {
      ret.write("null");
    } else {
      ret.write(this.ae);
    }

    ret.write(", ");
    ret.write("be:");
    if (this.be == null) {
      ret.write("null");
    } else {
      ret.write(this.be);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

