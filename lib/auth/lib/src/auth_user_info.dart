/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library auth.src.auth_user_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:auth/auth.dart';
import 'package:xkcm/xkcm.dart' as t_xkcm;

class AuthUserInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AuthUserInfo");
  static final TField _USER_ID_FIELD_DESC = new TField("userId", TType.STRING, 1);
  static final TField _USER_NAME_FIELD_DESC = new TField("userName", TType.STRING, 2);
  static final TField _FIGURE_URL_FIELD_DESC = new TField("figureUrl", TType.STRING, 3);
  static final TField _BIG_IMAGE_URL_FIELD_DESC = new TField("bigImageURL", TType.STRING, 4);

  String _userId;
  static const int USERID = 1;
  String _userName;
  static const int USERNAME = 2;
  String _figureUrl;
  static const int FIGUREURL = 3;
  String _bigImageURL;
  static const int BIGIMAGEURL = 4;


  AuthUserInfo() {
  }

  // userId
  String get userId => this._userId;

  set userId(String userId) {
    this._userId = userId;
  }

  bool isSetUserId() => this.userId != null;

  unsetUserId() {
    this.userId = null;
  }

  // userName
  String get userName => this._userName;

  set userName(String userName) {
    this._userName = userName;
  }

  bool isSetUserName() => this.userName != null;

  unsetUserName() {
    this.userName = null;
  }

  // figureUrl
  String get figureUrl => this._figureUrl;

  set figureUrl(String figureUrl) {
    this._figureUrl = figureUrl;
  }

  bool isSetFigureUrl() => this.figureUrl != null;

  unsetFigureUrl() {
    this.figureUrl = null;
  }

  // bigImageURL
  String get bigImageURL => this._bigImageURL;

  set bigImageURL(String bigImageURL) {
    this._bigImageURL = bigImageURL;
  }

  bool isSetBigImageURL() => this.bigImageURL != null;

  unsetBigImageURL() {
    this.bigImageURL = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USERID:
        return this.userId;
      case USERNAME:
        return this.userName;
      case FIGUREURL:
        return this.figureUrl;
      case BIGIMAGEURL:
        return this.bigImageURL;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USERID:
        if (value == null) {
          unsetUserId();
        } else {
          this.userId = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUserName();
        } else {
          this.userName = value;
        }
        break;

      case FIGUREURL:
        if (value == null) {
          unsetFigureUrl();
        } else {
          this.figureUrl = value;
        }
        break;

      case BIGIMAGEURL:
        if (value == null) {
          unsetBigImageURL();
        } else {
          this.bigImageURL = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USERID:
        return isSetUserId();
      case USERNAME:
        return isSetUserName();
      case FIGUREURL:
        return isSetFigureUrl();
      case BIGIMAGEURL:
        return isSetBigImageURL();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USERID:
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERNAME:
          if (field.type == TType.STRING) {
            this.userName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FIGUREURL:
          if (field.type == TType.STRING) {
            this.figureUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BIGIMAGEURL:
          if (field.type == TType.STRING) {
            this.bigImageURL = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.userId != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    if (this.userName != null) {
      oprot.writeFieldBegin(_USER_NAME_FIELD_DESC);
      oprot.writeString(this.userName);
      oprot.writeFieldEnd();
    }
    if (this.figureUrl != null) {
      oprot.writeFieldBegin(_FIGURE_URL_FIELD_DESC);
      oprot.writeString(this.figureUrl);
      oprot.writeFieldEnd();
    }
    if (this.bigImageURL != null) {
      oprot.writeFieldBegin(_BIG_IMAGE_URL_FIELD_DESC);
      oprot.writeString(this.bigImageURL);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AuthUserInfo(");

    ret.write("userId:");
    if (this.userId == null) {
      ret.write("null");
    } else {
      ret.write(this.userId);
    }

    ret.write(", ");
    ret.write("userName:");
    if (this.userName == null) {
      ret.write("null");
    } else {
      ret.write(this.userName);
    }

    ret.write(", ");
    ret.write("figureUrl:");
    if (this.figureUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.figureUrl);
    }

    ret.write(", ");
    ret.write("bigImageURL:");
    if (this.bigImageURL == null) {
      ret.write("null");
    } else {
      ret.write(this.bigImageURL);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

